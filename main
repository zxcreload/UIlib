-- Load the Obsidian UI Library and addons
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

-- Create the main window
local Window = Library:CreateWindow({
    Title = "ClickGUI",
    Footer = "Cursed by 32vision",
    ShowCustomCursor = false,
})

-- Create tabs
local Tabs = {
    Combat = Window:AddTab("Combat", "sword"),
    Movement = Window:AddTab("Movement", "move"),
    Visuals = Window:AddTab("Visuals", "eye"),
    Misc = Window:AddTab("Misc", "box"),
    Other = Window:AddTab("Other", "grid"),
    HUD = Window:AddTab("HUD", "monitor"),
}

-- Aimbot configuration (all values disabled by default)
getgenv().AimSettings = {
    AimPart = "Head",
    FOV = 300,
    FOVVisible = false,
    FOVType = "Outline",
    ThirdPerson = false,
    FirstPerson = false,
    TeamCheck = false,
    PredictMovement = false,
    PredictionVelocity = 9.5,
    Smoothness = 0.15,
    predictionXZ = 0.4,
    predictionY = 0.2,
    ResolverMode = "Velocity",
    Enabled = false,
    AimlockKey = "E"
}

-- Aimbot elements in one groupbox
local AimbotGroup = Tabs["Combat"]:AddLeftGroupbox("Aimbot Settings")

-- Create the aimbot toggle and capture its reference
local AimToggle = AimbotGroup:AddToggle("AimEnabled", {
    Text = "Enable Aimbot",
    Default = getgenv().AimSettings.Enabled,
    Tooltip = "Enable/Disable the aimbot",
    Callback = function(Value)
        getgenv().AimSettings.Enabled = Value
    end
})

-- Add a keybind to the toggle
local AimKeybind = AimToggle:AddKeyPicker("AimKeybind", {
    Default = getgenv().AimSettings.AimlockKey,
    Mode = "Toggle",
    Text = "Aim Key",
    NoUI = false,
    Callback = function(Value) end,
    ChangedCallback = function(NewKey)
        getgenv().AimSettings.AimlockKey = tostring(NewKey):lower()
    end
})

AimbotGroup:AddDropdown("AimPart", {
    Values = {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"},
    Default = getgenv().AimSettings.AimPart,
    Multi = false,
    Text = "Aim Part",
    Tooltip = "Select the part to aim at",
    Callback = function(Value)
        getgenv().AimSettings.AimPart = Value
    end
})

AimbotGroup:AddSlider("FOVSize", {
    Text = "FOV Size",
    Default = getgenv().AimSettings.FOV,
    Min = 50,
    Max = 1000,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        getgenv().AimSettings.FOV = Value
    end
})

AimbotGroup:AddToggle("FOVVisible", {
    Text = "Show FOV",
    Default = getgenv().AimSettings.FOVVisible,
    Tooltip = "Show/Hide the FOV circle",
    Callback = function(Value)
        getgenv().AimSettings.FOVVisible = Value
    end
})

AimbotGroup:AddDropdown("FOVType", {
    Values = {"Outline", "Filled"},
    Default = getgenv().AimSettings.FOVType,
    Multi = false,
    Text = "FOV Type",
    Tooltip = "Select FOV display type",
    Callback = function(Value)
        getgenv().AimSettings.FOVType = Value
    end
})

AimbotGroup:AddToggle("TeamCheck", {
    Text = "Team Check",
    Default = getgenv().AimSettings.TeamCheck,
    Tooltip = "Ignore teammates",
    Callback = function(Value)
        getgenv().AimSettings.TeamCheck = Value
    end
})

AimbotGroup:AddToggle("PredictMovement", {
    Text = "Predict Movement",
    Default = getgenv().AimSettings.PredictMovement,
    Tooltip = "Predict target movement",
    Callback = function(Value)
        getgenv().AimSettings.PredictMovement = Value
    end
})

AimbotGroup:AddSlider("PredictionXZ", {
    Text = "Horizontal Prediction",
    Default = getgenv().AimSettings.predictionXZ * 100,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Compact = false,
    Suffix = "%",
    Callback = function(Value)
        getgenv().AimSettings.predictionXZ = Value / 100
    end
})

AimbotGroup:AddSlider("PredictionY", {
    Text = "Vertical Prediction",
    Default = getgenv().AimSettings.predictionY * 100,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Compact = false,
    Suffix = "%",
    Callback = function(Value)
        getgenv().AimSettings.predictionY = Value / 100
    end
})

AimbotGroup:AddSlider("Smoothness", {
    Text = "Smoothness",
    Default = getgenv().AimSettings.Smoothness * 100,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Compact = false,
    Suffix = "%",
    Callback = function(Value)
        getgenv().AimSettings.Smoothness = Value / 100
    end
})

AimbotGroup:AddDropdown("ResolverMode", {
    Values = {"Velocity", "Move direction", "Calculate CFrame"},
    Default = getgenv().AimSettings.ResolverMode,
    Multi = false,
    Text = "Resolver Mode",
    Tooltip = "Select prediction calculation mode",
    Callback = function(Value)
        getgenv().AimSettings.ResolverMode = Value
    end
})

-- Остальной код остается без изменений
-- Aimbot script logic
local Players, UserInputService, RunService, StarterGui = game:GetService("Players"), game:GetService("UserInputService"), game:GetService("RunService"), game:GetService("StarterGui")
local LocalPlayer, Mouse, Camera, CFrameNew, Vector3New, Vector2New = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Vector3.new, Vector2.new
local DrawingEnabled, Aiming = true, false
local TargetPlayer
local LastPosition, LastTick, PredictedPosition

-- Create FOV circle UI
local AimbotFOV = Instance.new("ScreenGui")
AimbotFOV.Parent = game.CoreGui
AimbotFOV.Name = "AimbotFOV"

local FOVFilled = Instance.new("Frame")
FOVFilled.Size = UDim2.new(0, getgenv().AimSettings.FOV, 0, getgenv().AimSettings.FOV)
FOVFilled.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
FOVFilled.BackgroundTransparency = 0.7
FOVFilled.BorderSizePixel = 0
FOVFilled.Parent = AimbotFOV
local UICornerFilled = Instance.new("UICorner")
UICornerFilled.CornerRadius = UDim.new(0.5, 0)
UICornerFilled.Parent = FOVFilled

local FOVOutline = Instance.new("ImageLabel")
FOVOutline.Size = UDim2.new(0, getgenv().AimSettings.FOV, 0, getgenv().AimSettings.FOV)
FOVOutline.BackgroundTransparency = 1
FOVOutline.Image = "rbxassetid://0"
FOVOutline.BorderSizePixel = 0
FOVOutline.Parent = AimbotFOV
local UIStroke = Instance.new("UIStroke")
UIStroke.Thickness = 2
UIStroke.Color = Color3.fromRGB(255, 0, 0)
UIStroke.Parent = FOVOutline
local UICornerOutline = Instance.new("UICorner")
UICornerOutline.CornerRadius = UDim.new(0.5, 0)
UICornerOutline.Parent = FOVOutline

-- Function to convert world position to screen position
local function WorldToViewportPoint(position)
    return Camera:WorldToViewportPoint(position)
end

-- Function to find the closest target within FOV
local function FindTarget()
    if not getgenv().AimSettings.Enabled then return nil end
    
    local closestPlayer, closestDistance = nil, math.huge
    local fovRadius = getgenv().AimSettings.FOV / 2

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if not getgenv().AimSettings.TeamCheck or player.Team ~= LocalPlayer.Team then
                local targetPos = player.Character.HumanoidRootPart.Position
                local screenPos, onScreen = WorldToViewportPoint(targetPos)
                local distance = (Vector2New(Mouse.X, Mouse.Y) - Vector2New(screenPos.X, screenPos.Y)).Magnitude
                
                if distance <= fovRadius and onScreen then
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end
    
    return closestPlayer
end

-- Function to predict target position
local function PredictPosition(target)
    if target and target.Character and target.Character:FindFirstChild("Humanoid") then
        local aimPart = target.Character:FindFirstChild(getgenv().AimSettings.AimPart)
        if not aimPart then return nil end
        local currentPos = aimPart.Position
        
        if not LastPosition or not LastTick then
            LastPosition = currentPos
            LastTick = tick()
            PredictedPosition = currentPos
            return PredictedPosition
        end

        local currentTick = tick()
        local deltaTime = currentTick - LastTick
        
        if getgenv().AimSettings.ResolverMode == "Velocity" then
            local velocity = aimPart.Velocity
            PredictedPosition = currentPos + Vector3New(velocity.X * getgenv().AimSettings.predictionXZ, velocity.Y * getgenv().AimSettings.predictionY, velocity.Z * getgenv().AimSettings.predictionXZ)
        elseif getgenv().AimSettings.ResolverMode == "Move direction" then
            PredictedPosition = currentPos + (target.Character.Humanoid.MoveDirection * (getgenv().AimSettings.predictionXZ * 10))
        elseif getgenv().AimSettings.ResolverMode == "Calculate CFrame" then
            if (currentPos - LastPosition).Magnitude < 0.001 then
                PredictedPosition = currentPos 
            else
                local distance = (currentPos - LastPosition).Magnitude
                local speed = (distance / deltaTime) * (0.1 * (getgenv().AimSettings.predictionXZ * 10))
                PredictedPosition = currentPos + (currentPos - LastPosition).Unit * speed
                
                local verticalSpeed = (currentPos.Y - LastPosition.Y) / deltaTime * (0.1 * getgenv().AimSettings.predictionY)
                PredictedPosition = PredictedPosition + Vector3New(0, verticalSpeed, 0)
            end
        end
        
        LastTick = currentTick
        LastPosition = currentPos
        return PredictedPosition
    end
    return nil
end

-- Handle key press to toggle aiming
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode[string.upper(getgenv().AimSettings.AimlockKey)] then
        if not Aiming then
            Aiming = true
            TargetPlayer = FindTarget()
        else
            Aiming = false
            TargetPlayer = nil
        end
    end
end)

-- Update FOV circle and aimbot logic every frame
RunService.RenderStepped:Connect(function()
    local fovPosition = UDim2.new(0, Mouse.X - getgenv().AimSettings.FOV/2, 0, Mouse.Y - getgenv().AimSettings.FOV/2)
    FOVFilled.Position = fovPosition
    FOVOutline.Position = fovPosition

    FOVFilled.Size = UDim2.new(0, getgenv().AimSettings.FOV, 0, getgenv().AimSettings.FOV)
    FOVOutline.Size = UDim2.new(0, getgenv().AimSettings.FOV, 0, getgenv().AimSettings.FOV)

    FOVFilled.Visible = getgenv().AimSettings.FOVVisible and getgenv().AimSettings.FOVType == "Filled"
    FOVOutline.Visible = getgenv().AimSettings.FOVVisible and getgenv().AimSettings.FOVType == "Outline"

    if DrawingEnabled and Aiming and TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChild(getgenv().AimSettings.AimPart) then
        local aimPosition = getgenv().AimSettings.PredictMovement and PredictPosition(TargetPlayer) or TargetPlayer.Character[getgenv().AimSettings.AimPart].Position
        
        local newCFrame = CFrameNew(Camera.CFrame.Position, aimPosition)
        Camera.CFrame = Camera.CFrame:Lerp(newCFrame, getgenv().AimSettings.Smoothness)
        
        FOVFilled.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        UIStroke.Color = Color3.fromRGB(0, 255, 0)
    else
        FOVFilled.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        UIStroke.Color = Color3.fromRGB(255, 0, 0)
    end
end)

-- Function to cycle through resolver modes
local function ToggleResolver()
    if getgenv().AimSettings.ResolverMode == "Velocity" then
        getgenv().AimSettings.ResolverMode = "Move direction"
    elseif getgenv().AimSettings.ResolverMode == "Move direction" then
        getgenv().AimSettings.ResolverMode = "Calculate CFrame"
    elseif getgenv().AimSettings.ResolverMode == "Calculate CFrame" then
        getgenv().AimSettings.ResolverMode = "Velocity"
    end
    print("Resolver mode changed to:", getgenv().AimSettings.ResolverMode)
end

-- Bind resolver toggle to the 'R' key
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.R then
        ToggleResolver()
    end
end)

-- Setup ThemeManager and SaveManager
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("ClickGUI")
SaveManager:SetFolder("ClickGUI/settings")

SaveManager:BuildConfigSection(Tabs["HUD"])
ThemeManager:ApplyToTab(Tabs["HUD"])

-- Show the UI
Library:Toggle(true)
