-- SETTINGS
local Settings = {
    -- Общие настройки аимбота
    Keybind = Enum.KeyCode.C,  -- Клавиша для выбора цели
    PredictionFactor = 0.141245121,  -- Коэффициент предсказания движения

    -- Настройки jump offset
    JumpOffset = {
        TimeThreshold = 3,  -- Время в секундах для определения "полета"
        Height = 2,  -- Смещение точки прицеливания вверх при прыжке (в стадах)
    },

    -- Настройки трейсера (Beam)
    Tracer = {
        Color = Color3.fromRGB(255, 50, 50),  -- Основной цвет трейсера
        FadeColor = Color3.fromRGB(255, 150, 150),  -- Цвет для градиента
        Width0 = 0.2,  -- Ширина в начале
        Width1 = 0.1,  -- Ширина в конце
        Texture = "rbxassetid://7151778301",  -- Текстура трейсера
        TextureSpeed = 2,  -- Скорость анимации текстуры
        LightEmission = 1,  -- Свечение
        LightInfluence = 0,  -- Влияние внешнего освещения
        BrightnessPulse = 0.3  -- Амплитуда пульсации яркости
    },

    -- Настройки частиц (ParticleEmitter)
    Particles = {
        Color = Color3.fromRGB(255, 50, 50),  -- Цвет частиц
        Size = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0.1),
            NumberSequenceKeypoint.new(1, 0)
        }),
        Lifetime = NumberRange.new(0.3, 0.5),  -- Время жизни частиц
        Rate = 50,  -- Частота появления частиц
        Speed = NumberRange.new(2, 5),  -- Скорость частиц
        SpreadAngle = Vector2.new(-30, 30)  -- Угол разброса
    }
}

-- SERVICES
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- VARIABLES
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local Target = nil  -- Хранит выбранную цель
local Character = LocalPlayer.Character
local TracerBeam = nil  -- Объект Beam для трейсера
local TracerAttachment0 = nil  -- Точка начала трейсера
local TracerAttachment1 = nil  -- Точка конца трейсера
local ParticleEmitter = nil  -- Эффекты на конце трейсера
local TargetAirTime = 0  -- Время, проведенное целью в воздухе
local TargetStatus = "Ground"  -- Статус цели: "Ground", "Jumped", "Fly"

-- Инициализация 3D-трейсера
local function InitializeTracer()
    if TracerBeam then
        TracerBeam:Destroy()
        TracerAttachment0:Destroy()
        TracerAttachment1:Destroy()
        ParticleEmitter:Destroy()
    end

    TracerAttachment0 = Instance.new("Attachment")
    TracerAttachment1 = Instance.new("Attachment")
    TracerAttachment0.Name = "TracerStart"
    TracerAttachment1.Name = "TracerEnd"

    TracerBeam = Instance.new("Beam")
    TracerBeam.Name = "AimTracer"
    TracerBeam.Attachment0 = TracerAttachment0
    TracerBeam.Attachment1 = TracerAttachment1
    TracerBeam.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Settings.Tracer.Color),
        ColorSequenceKeypoint.new(1, Settings.Tracer.FadeColor)
    })
    TracerBeam.LightEmission = Settings.Tracer.LightEmission
    TracerBeam.LightInfluence = Settings.Tracer.LightInfluence
    TracerBeam.Width0 = Settings.Tracer.Width0
    TracerBeam.Width1 = Settings.Tracer.Width1
    TracerBeam.Texture = Settings.Tracer.Texture
    TracerBeam.TextureSpeed = Settings.Tracer.TextureSpeed
    TracerBeam.Enabled = false
    TracerBeam.Parent = workspace.Terrain

    ParticleEmitter = Instance.new("ParticleEmitter")
    ParticleEmitter.Color = ColorSequence.new(Settings.Particles.Color)
    ParticleEmitter.Size = Settings.Particles.Size
    ParticleEmitter.Lifetime = Settings.Particles.Lifetime
    ParticleEmitter.Rate = Settings.Particles.Rate
    ParticleEmitter.Speed = Settings.Particles.Speed
    ParticleEmitter.SpreadAngle = Settings.Particles.SpreadAngle
    ParticleEmitter.Enabled = false
    ParticleEmitter.Parent = TracerAttachment1
end

-- Функция для получения информации о цели
local function GetTargetInfo(player)
    if not player or not player.Character then
        return nil
    end
    local humanoid = player.Character:FindFirstChild("Humanoid")
    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then
        return nil
    end
    return {
        Name = player.Name,
        Health = humanoid.Health,
        MaxHealth = humanoid.MaxHealth,
        Position = rootPart.Position,
        Distance = (rootPart.Position - (Character and Character.HumanoidRootPart and Character.HumanoidRootPart.Position or Vector3.new())).Magnitude,
        Status = TargetStatus
    }
end

-- Функция для логирования информации о цели
local function LogTargetInfo(targetInfo)
    if targetInfo then
        print(string.format(
            "Target: %s | Health: %.1f/%.1f | Distance: %.2f studs | Position: (%.2f, %.2f, %.2f) | Status: %s",
            targetInfo.Name,
            targetInfo.Health,
            targetInfo.MaxHealth,
            targetInfo.Distance,
            targetInfo.Position.X,
            targetInfo.Position.Y,
            targetInfo.Position.Z,
            targetInfo.Status
        ))
    else
        print("No target information available")
    end
end

-- Функция для поиска ближайшего игрока к курсору
local function GetClosestToMouse()
    local ClosestTarget, ClosestDistance = nil, math.huge
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
            if humanoid and rootPart and humanoid.Health > 0 then
                local screenPos, onScreen = Camera:WorldToScreenPoint(rootPart.Position)
                if onScreen then
                    local distance = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                    if distance < ClosestDistance then
                        ClosestDistance = distance
                        ClosestTarget = player
                    end
                end
            end
        end
    end
    return ClosestTarget
end

-- Функция для проверки статуса цели
local function UpdateTargetStatus(deltaTime)
    if Target and Target.Character and Target.Character:FindFirstChild("Humanoid") then
        local humanoid = Target.Character.Humanoid
        local isInAir = humanoid.FloorMaterial == Enum.Material.Air

        if isInAir then
            TargetAirTime = TargetAirTime + deltaTime
            if TargetAirTime > Settings.JumpOffset.TimeThreshold then
                TargetStatus = "Fly"
            else
                TargetStatus = "Jumped"
            end
        else
            TargetAirTime = 0
            TargetStatus = "Ground"
        end
    else
        TargetAirTime = 0
        TargetStatus = "Ground"
    end
end

-- Функция для получения предсказанной позиции с учетом jump offset
local function GetPredictedPosition(targetRoot, velocity)
    local basePos = targetRoot.Position
    local predictedPos = basePos + velocity * Settings.PredictionFactor

    if TargetStatus == "Jumped" then
        -- Jump offset: поднимаем точку прицеливания на заданную высоту
        predictedPos = Vector3.new(predictedPos.X, basePos.Y + Settings.JumpOffset.Height, predictedPos.Z)
    end

    return predictedPos
end

-- Обновление трейсера
local function UpdateTracer(deltaTime)
    UpdateTargetStatus(deltaTime)

    if Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") and Character and Character:FindFirstChild("HumanoidRootPart") then
        local localRoot = Character.HumanoidRootPart
        local targetRoot = Target.Character.HumanoidRootPart
        local velocity = targetRoot.Velocity

        -- Получаем предсказанную позицию с учетом jump offset
        local predictedPos = GetPredictedPosition(targetRoot, velocity)

        -- Установка позиции трейсера
        TracerAttachment0.Parent = localRoot
        TracerAttachment0.WorldPosition = localRoot.Position
        TracerAttachment1.Parent = workspace.Terrain
        TracerAttachment1.WorldPosition = predictedPos

        -- Включение трейсера и эффектов
        TracerBeam.Enabled = true
        ParticleEmitter.Enabled = true

        -- Пульсация яркости для эффекта
        TracerBeam.Brightness = 1 + Settings.Tracer.BrightnessPulse * math.sin(tick() * 5)
    else
        TracerBeam.Enabled = false
        ParticleEmitter.Enabled = false
    end
end

-- Выбор цели по нажатию клавиши
UserInputService.InputBegan:Connect(function(Input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if Input.KeyCode == Settings.Keybind then
        if Target == nil then
            Target = GetClosestToMouse()
            if Target then
                warn("Locked on to: " .. Target.Name)
                local targetInfo = GetTargetInfo(Target)
                LogTargetInfo(targetInfo)
                TracerBeam.Enabled = true
                ParticleEmitter.Enabled = true
            else
                warn("No target found")
                TracerBeam.Enabled = false
                ParticleEmitter.Enabled = false
            end
        else
            warn("Unlocked from: " .. Target.Name)
            Target = nil
            TracerBeam.Enabled = false
            ParticleEmitter.Enabled = false
            TargetAirTime = 0
            TargetStatus = "Ground"
        end
    end
end)

-- Обработка появления нового персонажа
local function SetupCharacter(char)
    Character = char
    char.ChildAdded:Connect(function(tool)
        if tool:IsA("Tool") then
            tool.Activated:Connect(function()
                if Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = Target.Character.HumanoidRootPart
                    local velocity = rootPart.Velocity
                    -- Предсказанная позиция с учетом jump offset
                    local Hit = GetPredictedPosition(rootPart, velocity)
                    -- Отправка данных серверу
                    ReplicatedStorage.MainEvent:FireServer("UpdateMousePos", Hit)
                    -- Логирование информации о цели при активации
                    local targetInfo = GetTargetInfo(Target)
                    LogTargetInfo(targetInfo)
                end
            end)
        end
    end)
end

-- Инициализация
InitializeTracer()

-- Подключение к текущему и новым персонажам
if Character then
    SetupCharacter(Character)
end
LocalPlayer.CharacterAdded:Connect(SetupCharacter)

-- Обновление трейсера в реальном времени
RunService.RenderStepped:Connect(UpdateTracer)

-- Очистка при отключении
game:BindToClose(function()
    if TracerBeam then
        TracerBeam:Destroy()
        TracerAttachment0:Destroy()
        TracerAttachment1:Destroy()
        ParticleEmitter:Destroy()
    end
end)
